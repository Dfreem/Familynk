// <auto-generated />
using System;
using Familynk.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Familynk.Migrations
{
    [DbContext(typeof(FamilyContext))]
    [Migration("20230317023053_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Familynk.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsReply")
                        .HasColumnType("tinyint(1)");

                    b.Property<TimeSpan>("LifeSpan")
                        .HasColumnType("time(6)");

                    b.Property<int?>("ScrapId")
                        .HasColumnType("int");

                    b.Property<string>("SenderId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("CommentId");

                    b.HasIndex("ScrapId");

                    b.HasIndex("SenderId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Familynk.Models.DirectMessage", b =>
                {
                    b.Property<int>("DirectMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<TimeSpan>("LifeSpan")
                        .HasColumnType("time(6)");

                    b.Property<string>("RecipientId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SenderId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("DirectMessageId");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("DMs");
                });

            modelBuilder.Entity("Familynk.Models.FamilyCalendar", b =>
                {
                    b.Property<int>("FamilyCalendarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("SerializedCalendar")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("FamilyCalendarId");

                    b.ToTable("FamilyCalendars");
                });

            modelBuilder.Entity("Familynk.Models.FamilyEvent", b =>
                {
                    b.Property<int>("FamilyEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.HasKey("FamilyEventId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Familynk.Models.FamilyMember", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Birthday")
                        .HasColumnType("date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("FamilyEventId")
                        .HasColumnType("int");

                    b.Property<int?>("FamilyMessageId")
                        .HasColumnType("int");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("FamilyUnitId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("MemberTagId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ScrapBookId")
                        .HasColumnType("int");

                    b.Property<int?>("ScrapId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("FamilyEventId");

                    b.HasIndex("FamilyMessageId");

                    b.HasIndex("FamilyUnitId");

                    b.HasIndex("MemberTagId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("ScrapBookId");

                    b.HasIndex("ScrapId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Familynk.Models.FamilyMessage", b =>
                {
                    b.Property<int>("FamilyMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<TimeSpan>("LifeSpan")
                        .HasColumnType("time(6)");

                    b.Property<string>("SenderId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("FamilyMessageId");

                    b.HasIndex("SenderId");

                    b.ToTable("BulletinBoard");
                });

            modelBuilder.Entity("Familynk.Models.FamilyUnit", b =>
                {
                    b.Property<int>("FamilyUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("FamilyScrapsScrapBookId")
                        .HasColumnType("int");

                    b.Property<int>("RulesHouseRulesId")
                        .HasColumnType("int");

                    b.HasKey("FamilyUnitId");

                    b.HasIndex("FamilyScrapsScrapBookId");

                    b.HasIndex("RulesHouseRulesId");

                    b.ToTable("Neighborhood");
                });

            modelBuilder.Entity("Familynk.Models.HouseRules", b =>
                {
                    b.Property<int>("HouseRulesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("FamilyMembersCreateEvents")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("FamilyMembersCustomizeKitchen")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("FamilyMembersInviteOtherMembers")
                        .HasColumnType("tinyint(1)");

                    b.Property<TimeSpan>("MagneticMessageLifespan")
                        .HasColumnType("time(6)");

                    b.Property<TimeSpan>("StickyNoteLifespan")
                        .HasColumnType("time(6)");

                    b.HasKey("HouseRulesId");

                    b.ToTable("Rules");
                });

            modelBuilder.Entity("Familynk.Models.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte[]>("Bytes")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("ScrapBookId")
                        .HasColumnType("int");

                    b.Property<int?>("ScrapId")
                        .HasColumnType("int");

                    b.Property<int>("width")
                        .HasColumnType("int");

                    b.HasKey("ImageId");

                    b.HasIndex("ScrapBookId");

                    b.HasIndex("ScrapId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Familynk.Models.MagneticMessage", b =>
                {
                    b.Property<int>("MagneticMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<TimeSpan>("LifeSpan")
                        .HasColumnType("time(6)");

                    b.Property<int?>("PictureImageId")
                        .HasColumnType("int");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("MagneticMessageId");

                    b.HasIndex("PictureImageId");

                    b.HasIndex("SenderId");

                    b.ToTable("Refrigerator");
                });

            modelBuilder.Entity("Familynk.Models.MemberTag", b =>
                {
                    b.Property<int>("MemberTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("MemberTagId");

                    b.HasIndex("SenderId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Familynk.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<TimeSpan>("LifeSpan")
                        .HasColumnType("time(6)");

                    b.Property<string>("RecipientId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("NotificationId");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Familynk.Models.Scrap", b =>
                {
                    b.Property<int>("ScrapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<TimeSpan>("LifeSpan")
                        .HasColumnType("time(6)");

                    b.Property<int?>("ScrapBookId")
                        .HasColumnType("int");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ScrapId");

                    b.HasIndex("ScrapBookId");

                    b.HasIndex("SenderId");

                    b.ToTable("Scraps");
                });

            modelBuilder.Entity("Familynk.Models.ScrapBook", b =>
                {
                    b.Property<int>("ScrapBookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.HasKey("ScrapBookId");

                    b.ToTable("ScrapBooks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Familynk.Models.Comment", b =>
                {
                    b.HasOne("Familynk.Models.Scrap", null)
                        .WithMany("Comments")
                        .HasForeignKey("ScrapId");

                    b.HasOne("Familynk.Models.FamilyMember", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Familynk.Models.DirectMessage", b =>
                {
                    b.HasOne("Familynk.Models.FamilyMember", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId");

                    b.HasOne("Familynk.Models.FamilyMember", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Familynk.Models.FamilyMember", b =>
                {
                    b.HasOne("Familynk.Models.FamilyEvent", null)
                        .WithMany("TaggedMembers")
                        .HasForeignKey("FamilyEventId");

                    b.HasOne("Familynk.Models.FamilyMessage", null)
                        .WithMany("TaggedMembers")
                        .HasForeignKey("FamilyMessageId");

                    b.HasOne("Familynk.Models.FamilyUnit", null)
                        .WithMany("FamilyMembers")
                        .HasForeignKey("FamilyUnitId");

                    b.HasOne("Familynk.Models.MemberTag", null)
                        .WithMany("TaggedMembers")
                        .HasForeignKey("MemberTagId");

                    b.HasOne("Familynk.Models.ScrapBook", null)
                        .WithMany("TaggedMembers")
                        .HasForeignKey("ScrapBookId");

                    b.HasOne("Familynk.Models.Scrap", null)
                        .WithMany("TaggedMembers")
                        .HasForeignKey("ScrapId");
                });

            modelBuilder.Entity("Familynk.Models.FamilyMessage", b =>
                {
                    b.HasOne("Familynk.Models.FamilyMember", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Familynk.Models.FamilyUnit", b =>
                {
                    b.HasOne("Familynk.Models.ScrapBook", "FamilyScraps")
                        .WithMany()
                        .HasForeignKey("FamilyScrapsScrapBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Familynk.Models.HouseRules", "Rules")
                        .WithMany()
                        .HasForeignKey("RulesHouseRulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FamilyScraps");

                    b.Navigation("Rules");
                });

            modelBuilder.Entity("Familynk.Models.Image", b =>
                {
                    b.HasOne("Familynk.Models.ScrapBook", null)
                        .WithMany("Photos")
                        .HasForeignKey("ScrapBookId");

                    b.HasOne("Familynk.Models.Scrap", null)
                        .WithMany("Images")
                        .HasForeignKey("ScrapId");
                });

            modelBuilder.Entity("Familynk.Models.MagneticMessage", b =>
                {
                    b.HasOne("Familynk.Models.Image", "Picture")
                        .WithMany()
                        .HasForeignKey("PictureImageId");

                    b.HasOne("Familynk.Models.FamilyMember", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Picture");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Familynk.Models.MemberTag", b =>
                {
                    b.HasOne("Familynk.Models.FamilyMember", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Familynk.Models.Notification", b =>
                {
                    b.HasOne("Familynk.Models.FamilyMember", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Familynk.Models.FamilyMember", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Familynk.Models.Scrap", b =>
                {
                    b.HasOne("Familynk.Models.ScrapBook", null)
                        .WithMany("Entries")
                        .HasForeignKey("ScrapBookId");

                    b.HasOne("Familynk.Models.FamilyMember", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Familynk.Models.FamilyMember", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Familynk.Models.FamilyMember", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Familynk.Models.FamilyMember", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Familynk.Models.FamilyMember", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Familynk.Models.FamilyEvent", b =>
                {
                    b.Navigation("TaggedMembers");
                });

            modelBuilder.Entity("Familynk.Models.FamilyMessage", b =>
                {
                    b.Navigation("TaggedMembers");
                });

            modelBuilder.Entity("Familynk.Models.FamilyUnit", b =>
                {
                    b.Navigation("FamilyMembers");
                });

            modelBuilder.Entity("Familynk.Models.MemberTag", b =>
                {
                    b.Navigation("TaggedMembers");
                });

            modelBuilder.Entity("Familynk.Models.Scrap", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("TaggedMembers");
                });

            modelBuilder.Entity("Familynk.Models.ScrapBook", b =>
                {
                    b.Navigation("Entries");

                    b.Navigation("Photos");

                    b.Navigation("TaggedMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
